openapi: 3.0.3
info:
  title: TODO List API
  description: A comprehensive REST API for managing TODO lists and tasks
  version: 1.0.0
  contact:
    name: API Support
    email: support@todolist.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.todolist.com/v1
    description: Production server
  - url: https://staging-api.todolist.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Lists
    description: TODO list management
  - name: Tasks
    description: Task management within lists
  - name: Categories
    description: Task categorization
  - name: Search
    description: Search and filtering operations

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
      required:
        - error
        - code

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        username:
          type: string
          description: Username
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - email
        - username

    TodoList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique list identifier
        name:
          type: string
          description: List name
        description:
          type: string
          description: List description
        color:
          type: string
          description: List color (hex code)
        isShared:
          type: boolean
          description: Whether the list is shared
        ownerId:
          type: string
          format: uuid
          description: Owner user ID
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        taskCount:
          type: integer
          description: Number of tasks in the list
        completedTaskCount:
          type: integer
          description: Number of completed tasks
      required:
        - id
        - name
        - ownerId

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique task identifier
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        isCompleted:
          type: boolean
          description: Task completion status
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Task priority level
        dueDate:
          type: string
          format: date-time
          description: Task due date
        listId:
          type: string
          format: uuid
          description: Parent list ID
        categoryId:
          type: string
          format: uuid
          description: Category ID
        tags:
          type: array
          items:
            type: string
          description: Task tags
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        completedAt:
          type: string
          format: date-time
          description: Completion timestamp
      required:
        - id
        - title
        - listId

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique category identifier
        name:
          type: string
          description: Category name
        color:
          type: string
          description: Category color (hex code)
        userId:
          type: string
          format: uuid
          description: Owner user ID
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - name
        - userId

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        username:
          type: string
          description: Username
        password:
          type: string
          description: Password
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
      required:
        - email
        - username
        - password

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          description: Password
      required:
        - email
        - password

    CreateListRequest:
      type: object
      properties:
        name:
          type: string
          description: List name
        description:
          type: string
          description: List description
        color:
          type: string
          description: List color (hex code)
        isShared:
          type: boolean
          description: Whether the list is shared
      required:
        - name

    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Task priority level
        dueDate:
          type: string
          format: date-time
          description: Task due date
        categoryId:
          type: string
          format: uuid
          description: Category ID
        tags:
          type: array
          items:
            type: string
          description: Task tags
      required:
        - title

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        isCompleted:
          type: boolean
          description: Task completion status
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Task priority level
        dueDate:
          type: string
          format: date-time
          description: Task due date
        categoryId:
          type: string
          format: uuid
          description: Category ID
        tags:
          type: array
          items:
            type: string
          description: Task tags

    CreateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          description: Category name
        color:
          type: string
          description: Category color (hex code)
      required:
        - name

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          description: Array of items
        pagination:
          type: object
          properties:
            page:
              type: integer
              description: Current page number
            limit:
              type: integer
              description: Items per page
            total:
              type: integer
              description: Total number of items
            totalPages:
              type: integer
              description: Total number of pages
            hasNext:
              type: boolean
              description: Whether there's a next page
            hasPrev:
              type: boolean
              description: Whether there's a previous page

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT authentication token
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT authentication token
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Get a new JWT token using refresh token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: New JWT authentication token
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate current JWT token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User management endpoints
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve the current user's profile information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Update current user profile
      description: Update the current user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # List management endpoints
  /lists:
    get:
      tags:
        - Lists
      summary: Get user's lists
      description: Retrieve all lists owned by the current user
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: Search term for list names
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Lists retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TodoList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Lists
      summary: Create a new list
      description: Create a new TODO list
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
      responses:
        '201':
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lists/{listId}:
    get:
      tags:
        - Lists
      summary: Get list by ID
      description: Retrieve a specific list by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: List ID
      responses:
        '200':
          description: List retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Lists
      summary: Update list
      description: Update an existing list
      security:
        - BearerAuth: []
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: List ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
      responses:
        '200':
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Lists
      summary: Delete list
      description: Delete a list and all its tasks
      security:
        - BearerAuth: []
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: List ID
      responses:
        '204':
          description: List deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Task management endpoints
  /lists/{listId}/tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks in a list
      description: Retrieve all tasks in a specific list
      security:
        - BearerAuth: []
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: List ID
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 20
        - name: completed
          in: query
          description: Filter by completion status
          required: false
          schema:
            type: boolean
        - name: priority
          in: query
          description: Filter by priority
          required: false
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - name: categoryId
          in: query
          description: Filter by category
          required: false
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search term for task titles
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort field
          required: false
          schema:
            type: string
            enum: [createdAt, updatedAt, dueDate, priority, title]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Create a new task in a specific list
      security:
        - BearerAuth: []
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: List ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: List not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Task ID
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update an existing task
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a specific task
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Task ID
      responses:
        '204':
          description: Task deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{taskId}/toggle:
    patch:
      tags:
        - Tasks
      summary: Toggle task completion
      description: Toggle the completion status of a task
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Task ID
      responses:
        '200':
          description: Task completion status toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Category management endpoints
  /categories:
    get:
      tags:
        - Categories
      summary: Get user's categories
      description: Retrieve all categories owned by the current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Categories
      summary: Create a new category
      description: Create a new task category
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieve a specific category by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Categories
      summary: Update category
      description: Update an existing category
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Categories
      summary: Delete category
      description: Delete a category (tasks will be uncategorized)
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      responses:
        '204':
          description: Category deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Search and analytics endpoints
  /search:
    get:
      tags:
        - Search
      summary: Search tasks and lists
      description: Search across all tasks and lists
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: Search type (tasks, lists, or all)
          required: false
          schema:
            type: string
            enum: [tasks, lists, all]
            default: all
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/TodoList'
                  pagination:
                    $ref: '#/components/schemas/PaginatedResponse/properties/pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics:
    get:
      tags:
        - Search
      summary: Get user analytics
      description: Get analytics and statistics for the current user
      security:
        - BearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for analytics
          required: false
          schema:
            type: string
            enum: [week, month, year, all]
            default: month
      responses:
        '200':
          description: Analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalTasks:
                    type: integer
                    description: Total number of tasks
                  completedTasks:
                    type: integer
                    description: Number of completed tasks
                  completionRate:
                    type: number
                    format: float
                    description: Task completion rate (percentage)
                  totalLists:
                    type: integer
                    description: Total number of lists
                  tasksByPriority:
                    type: object
                    properties:
                      low:
                        type: integer
                      medium:
                        type: integer
                      high:
                        type: integer
                      urgent:
                        type: integer
                  tasksByCategory:
                    type: array
                    items:
                      type: object
                      properties:
                        categoryId:
                          type: string
                          format: uuid
                        categoryName:
                          type: string
                        count:
                          type: integer
                  recentActivity:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: [task_created, task_completed, list_created]
                        timestamp:
                          type: string
                          format: date-time
                        description:
                          type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Bulk operations
  /tasks/bulk:
    post:
      tags:
        - Tasks
      summary: Bulk create tasks
      description: Create multiple tasks at once
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listId:
                  type: string
                  format: uuid
                  description: Target list ID
                tasks:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateTaskRequest'
              required:
                - listId
                - tasks
      responses:
        '201':
          description: Tasks created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/bulk/update:
    patch:
      tags:
        - Tasks
      summary: Bulk update tasks
      description: Update multiple tasks at once
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of task IDs to update
                updates:
                  $ref: '#/components/schemas/UpdateTaskRequest'
              required:
                - taskIds
                - updates
      responses:
        '200':
          description: Tasks updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/bulk/delete:
    delete:
      tags:
        - Tasks
      summary: Bulk delete tasks
      description: Delete multiple tasks at once
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of task IDs to delete
              required:
                - taskIds
      responses:
        '204':
          description: Tasks deleted successfully
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []
